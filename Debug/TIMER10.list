
TIMER10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002554  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002660  08002660  00012660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002684  08002684  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002684  08002684  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002684  08002684  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002684  08002684  00012684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002688  08002688  00012688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800268c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000084  08002710  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002710  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008914  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000160e  00000000  00000000  000289c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  00029fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001636f  00000000  00000000  0002b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009678  00000000  00000000  00041647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082359  00000000  00000000  0004acbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cd018  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002880  00000000  00000000  000cd06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08002648 	.word	0x08002648

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08002648 	.word	0x08002648

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 ff6e 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f8ba 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f940 	bl	80003dc <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f8f2 	bl	8000344 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000160:	484f      	ldr	r0, [pc, #316]	; (80002a0 <main+0x154>)
 8000162:	f001 fead 	bl	8001ec0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, RESET);
 8000166:	2200      	movs	r2, #0
 8000168:	2140      	movs	r1, #64	; 0x40
 800016a:	484e      	ldr	r0, [pc, #312]	; (80002a4 <main+0x158>)
 800016c:	f001 fa4a 	bl	8001604 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, RESET);
 8000170:	2200      	movs	r2, #0
 8000172:	2180      	movs	r1, #128	; 0x80
 8000174:	484b      	ldr	r0, [pc, #300]	; (80002a4 <main+0x158>)
 8000176:	f001 fa45 	bl	8001604 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, RESET);
 800017a:	2200      	movs	r2, #0
 800017c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000180:	4848      	ldr	r0, [pc, #288]	; (80002a4 <main+0x158>)
 8000182:	f001 fa3f 	bl	8001604 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, RESET);
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800018c:	4845      	ldr	r0, [pc, #276]	; (80002a4 <main+0x158>)
 800018e:	f001 fa39 	bl	8001604 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(l1_GPIO_Port, l1_Pin, RESET);
 8000192:	2200      	movs	r2, #0
 8000194:	2120      	movs	r1, #32
 8000196:	4843      	ldr	r0, [pc, #268]	; (80002a4 <main+0x158>)
 8000198:	f001 fa34 	bl	8001604 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(dot_GPIO_Port, dot_Pin, SET);
 800019c:	2201      	movs	r2, #1
 800019e:	2110      	movs	r1, #16
 80001a0:	4840      	ldr	r0, [pc, #256]	; (80002a4 <main+0x158>)
 80001a2:	f001 fa2f 	bl	8001604 <HAL_GPIO_WritePin>

hour = 15 , minute = 8 , second = 50;
 80001a6:	4b40      	ldr	r3, [pc, #256]	; (80002a8 <main+0x15c>)
 80001a8:	220f      	movs	r2, #15
 80001aa:	601a      	str	r2, [r3, #0]
 80001ac:	4b3f      	ldr	r3, [pc, #252]	; (80002ac <main+0x160>)
 80001ae:	2208      	movs	r2, #8
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	4b3f      	ldr	r3, [pc, #252]	; (80002b0 <main+0x164>)
 80001b4:	2232      	movs	r2, #50	; 0x32
 80001b6:	601a      	str	r2, [r3, #0]
setTimer1(5);
 80001b8:	2005      	movs	r0, #5
 80001ba:	f000 fdcd 	bl	8000d58 <setTimer1>
setTimer2(5);
 80001be:	2005      	movs	r0, #5
 80001c0:	f000 fdf8 	bl	8000db4 <setTimer2>
setTimer3(5);
 80001c4:	2005      	movs	r0, #5
 80001c6:	f000 fe23 	bl	8000e10 <setTimer3>
setTimer4(5);
 80001ca:	2005      	movs	r0, #5
 80001cc:	f000 fe4e 	bl	8000e6c <setTimer4>
  while (1)
  {

	  if(timer1_flag == 1){
 80001d0:	4b38      	ldr	r3, [pc, #224]	; (80002b4 <main+0x168>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d106      	bne.n	80001e6 <main+0x9a>
	  	  setTimer1(100);
 80001d8:	2064      	movs	r0, #100	; 0x64
 80001da:	f000 fdbd 	bl	8000d58 <setTimer1>
	  	  HAL_GPIO_TogglePin(dot_GPIO_Port, dot_Pin);}
 80001de:	2110      	movs	r1, #16
 80001e0:	4830      	ldr	r0, [pc, #192]	; (80002a4 <main+0x158>)
 80001e2:	f001 fa27 	bl	8001634 <HAL_GPIO_TogglePin>

	  if(timer2_flag == 1){
 80001e6:	4b34      	ldr	r3, [pc, #208]	; (80002b8 <main+0x16c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d10a      	bne.n	8000204 <main+0xb8>
	  	 setTimer2(50);
 80001ee:	2032      	movs	r0, #50	; 0x32
 80001f0:	f000 fde0 	bl	8000db4 <setTimer2>
	  	 update7SEG(index_led++);}
 80001f4:	4b31      	ldr	r3, [pc, #196]	; (80002bc <main+0x170>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	1c5a      	adds	r2, r3, #1
 80001fa:	4930      	ldr	r1, [pc, #192]	; (80002bc <main+0x170>)
 80001fc:	600a      	str	r2, [r1, #0]
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 f982 	bl	8000508 <update7SEG>
	  if(index_led > 3) {index_led = 0;}
 8000204:	4b2d      	ldr	r3, [pc, #180]	; (80002bc <main+0x170>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b03      	cmp	r3, #3
 800020a:	dd02      	ble.n	8000212 <main+0xc6>
 800020c:	4b2b      	ldr	r3, [pc, #172]	; (80002bc <main+0x170>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]

	  if(timer3_flag == 1) {
 8000212:	4b2b      	ldr	r3, [pc, #172]	; (80002c0 <main+0x174>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2b01      	cmp	r3, #1
 8000218:	d12a      	bne.n	8000270 <main+0x124>
	  	setTimer3(100);
 800021a:	2064      	movs	r0, #100	; 0x64
 800021c:	f000 fdf8 	bl	8000e10 <setTimer3>
	  	second ++;
 8000220:	4b23      	ldr	r3, [pc, #140]	; (80002b0 <main+0x164>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	3301      	adds	r3, #1
 8000226:	4a22      	ldr	r2, [pc, #136]	; (80002b0 <main+0x164>)
 8000228:	6013      	str	r3, [r2, #0]
	  	if ( second >= 60){
 800022a:	4b21      	ldr	r3, [pc, #132]	; (80002b0 <main+0x164>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2b3b      	cmp	r3, #59	; 0x3b
 8000230:	dd08      	ble.n	8000244 <main+0xf8>
	  		  second = 0;
 8000232:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <main+0x164>)
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
	  		  minute ++;
 8000238:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <main+0x160>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	3301      	adds	r3, #1
 800023e:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <main+0x160>)
 8000240:	6013      	str	r3, [r2, #0]
 8000242:	e013      	b.n	800026c <main+0x120>
	  		  	  }
	  	else if( minute >= 60){
 8000244:	4b19      	ldr	r3, [pc, #100]	; (80002ac <main+0x160>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2b3b      	cmp	r3, #59	; 0x3b
 800024a:	dd08      	ble.n	800025e <main+0x112>
	  		 minute = 0;
 800024c:	4b17      	ldr	r3, [pc, #92]	; (80002ac <main+0x160>)
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
	  		 hour ++;
 8000252:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <main+0x15c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3301      	adds	r3, #1
 8000258:	4a13      	ldr	r2, [pc, #76]	; (80002a8 <main+0x15c>)
 800025a:	6013      	str	r3, [r2, #0]
 800025c:	e006      	b.n	800026c <main+0x120>
	  		  	  }
	  	else if( hour >=24){
 800025e:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <main+0x15c>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2b17      	cmp	r3, #23
 8000264:	dd02      	ble.n	800026c <main+0x120>
	  		 hour = 0;
 8000266:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <main+0x15c>)
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
	  		  	  }
	  		updateClockBuffer();
 800026c:	f000 f90c 	bl	8000488 <updateClockBuffer>
	  	  }
	  if(timer4_flag == 1) {
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <main+0x178>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d1ab      	bne.n	80001d0 <main+0x84>
		 updateLEDMatrix (index_led_matrix++);
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <main+0x17c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	1c5a      	adds	r2, r3, #1
 800027e:	4912      	ldr	r1, [pc, #72]	; (80002c8 <main+0x17c>)
 8000280:	600a      	str	r2, [r1, #0]
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fb70 	bl	8000968 <updateLEDMatrix>
		 if(index_led_matrix == 52) index_led_matrix = 0;
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <main+0x17c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b34      	cmp	r3, #52	; 0x34
 800028e:	d102      	bne.n	8000296 <main+0x14a>
 8000290:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <main+0x17c>)
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
		 	 	 setTimer4(5);
 8000296:	2005      	movs	r0, #5
 8000298:	f000 fde8 	bl	8000e6c <setTimer4>
	  if(timer1_flag == 1){
 800029c:	e798      	b.n	80001d0 <main+0x84>
 800029e:	bf00      	nop
 80002a0:	200000d4 	.word	0x200000d4
 80002a4:	40010800 	.word	0x40010800
 80002a8:	200000d0 	.word	0x200000d0
 80002ac:	200000cc 	.word	0x200000cc
 80002b0:	200000c8 	.word	0x200000c8
 80002b4:	200000ac 	.word	0x200000ac
 80002b8:	200000b4 	.word	0x200000b4
 80002bc:	200000a0 	.word	0x200000a0
 80002c0:	200000bc 	.word	0x200000bc
 80002c4:	200000c4 	.word	0x200000c4
 80002c8:	200000a4 	.word	0x200000a4

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b090      	sub	sp, #64	; 0x40
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 f9ac 	bl	8002638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ee:	2302      	movs	r3, #2
 80002f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	2310      	movs	r3, #16
 80002f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fa:	2300      	movs	r3, #0
 80002fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	4618      	mov	r0, r3
 8000304:	f001 f9b0 	bl	8001668 <HAL_RCC_OscConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800030e:	f000 fd1d 	bl	8000d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	230f      	movs	r3, #15
 8000314:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fc1c 	bl	8001b68 <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000336:	f000 fd09 	bl	8000d4c <Error_Handler>
  }
}
 800033a:	bf00      	nop
 800033c:	3740      	adds	r7, #64	; 0x40
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000358:	463b      	mov	r3, r7
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <MX_TIM2_Init+0x94>)
 8000362:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000366:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <MX_TIM2_Init+0x94>)
 800036a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800036e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <MX_TIM2_Init+0x94>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_TIM2_Init+0x94>)
 8000378:	2209      	movs	r2, #9
 800037a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <MX_TIM2_Init+0x94>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_TIM2_Init+0x94>)
 8000384:	2200      	movs	r2, #0
 8000386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000388:	4813      	ldr	r0, [pc, #76]	; (80003d8 <MX_TIM2_Init+0x94>)
 800038a:	f001 fd49 	bl	8001e20 <HAL_TIM_Base_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000394:	f000 fcda 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800039c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800039e:	f107 0308 	add.w	r3, r7, #8
 80003a2:	4619      	mov	r1, r3
 80003a4:	480c      	ldr	r0, [pc, #48]	; (80003d8 <MX_TIM2_Init+0x94>)
 80003a6:	f001 fedf 	bl	8002168 <HAL_TIM_ConfigClockSource>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003b0:	f000 fccc 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b4:	2300      	movs	r3, #0
 80003b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003bc:	463b      	mov	r3, r7
 80003be:	4619      	mov	r1, r3
 80003c0:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_TIM2_Init+0x94>)
 80003c2:	f002 f8ab 	bl	800251c <HAL_TIMEx_MasterConfigSynchronization>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003cc:	f000 fcbe 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200000d4 	.word	0x200000d4

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	f107 0308 	add.w	r3, r7, #8
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b22      	ldr	r3, [pc, #136]	; (800047c <MX_GPIO_Init+0xa0>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a21      	ldr	r2, [pc, #132]	; (800047c <MX_GPIO_Init+0xa0>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b1f      	ldr	r3, [pc, #124]	; (800047c <MX_GPIO_Init+0xa0>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000408:	4b1c      	ldr	r3, [pc, #112]	; (800047c <MX_GPIO_Init+0xa0>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a1b      	ldr	r2, [pc, #108]	; (800047c <MX_GPIO_Init+0xa0>)
 800040e:	f043 0308 	orr.w	r3, r3, #8
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b19      	ldr	r3, [pc, #100]	; (800047c <MX_GPIO_Init+0xa0>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0308 	and.w	r3, r3, #8
 800041c:	603b      	str	r3, [r7, #0]
 800041e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|dot_Pin|l1_Pin
 8000420:	2200      	movs	r2, #0
 8000422:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8000426:	4816      	ldr	r0, [pc, #88]	; (8000480 <MX_GPIO_Init+0xa4>)
 8000428:	f001 f8ec 	bl	8001604 <HAL_GPIO_WritePin>
                          |en0_Pin|en1_Pin|en2_Pin|en3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|ROW2_Pin
 800042c:	2200      	movs	r2, #0
 800042e:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8000432:	4814      	ldr	r0, [pc, #80]	; (8000484 <MX_GPIO_Init+0xa8>)
 8000434:	f001 f8e6 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin dot_Pin l1_Pin
                           en0_Pin en1_Pin en2_Pin en3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|dot_Pin|l1_Pin
 8000438:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800043c:	60bb      	str	r3, [r7, #8]
                          |en0_Pin|en1_Pin|en2_Pin|en3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043e:	2301      	movs	r3, #1
 8000440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	2302      	movs	r3, #2
 8000448:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044a:	f107 0308 	add.w	r3, r7, #8
 800044e:	4619      	mov	r1, r3
 8000450:	480b      	ldr	r0, [pc, #44]	; (8000480 <MX_GPIO_Init+0xa4>)
 8000452:	f000 ff5d 	bl	8001310 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin d_Pin e_Pin f_Pin
                           g_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|ROW2_Pin
 8000456:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800045a:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2302      	movs	r3, #2
 8000466:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000468:	f107 0308 	add.w	r3, r7, #8
 800046c:	4619      	mov	r1, r3
 800046e:	4805      	ldr	r0, [pc, #20]	; (8000484 <MX_GPIO_Init+0xa8>)
 8000470:	f000 ff4e 	bl	8001310 <HAL_GPIO_Init>

}
 8000474:	bf00      	nop
 8000476:	3718      	adds	r7, #24
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	40010800 	.word	0x40010800
 8000484:	40010c00 	.word	0x40010c00

08000488 <updateClockBuffer>:

/* USER CODE BEGIN 4 */
void updateClockBuffer(){
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	led_buffer[0] = hour / 10;
 800048c:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <updateClockBuffer+0x70>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a1a      	ldr	r2, [pc, #104]	; (80004fc <updateClockBuffer+0x74>)
 8000492:	fb82 1203 	smull	r1, r2, r2, r3
 8000496:	1092      	asrs	r2, r2, #2
 8000498:	17db      	asrs	r3, r3, #31
 800049a:	1ad3      	subs	r3, r2, r3
 800049c:	4a18      	ldr	r2, [pc, #96]	; (8000500 <updateClockBuffer+0x78>)
 800049e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = hour % 10;
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <updateClockBuffer+0x70>)
 80004a2:	6819      	ldr	r1, [r3, #0]
 80004a4:	4b15      	ldr	r3, [pc, #84]	; (80004fc <updateClockBuffer+0x74>)
 80004a6:	fb83 2301 	smull	r2, r3, r3, r1
 80004aa:	109a      	asrs	r2, r3, #2
 80004ac:	17cb      	asrs	r3, r1, #31
 80004ae:	1ad2      	subs	r2, r2, r3
 80004b0:	4613      	mov	r3, r2
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	4413      	add	r3, r2
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	1aca      	subs	r2, r1, r3
 80004ba:	4b11      	ldr	r3, [pc, #68]	; (8000500 <updateClockBuffer+0x78>)
 80004bc:	605a      	str	r2, [r3, #4]
	led_buffer[2] = minute / 10;
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <updateClockBuffer+0x7c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <updateClockBuffer+0x74>)
 80004c4:	fb82 1203 	smull	r1, r2, r2, r3
 80004c8:	1092      	asrs	r2, r2, #2
 80004ca:	17db      	asrs	r3, r3, #31
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <updateClockBuffer+0x78>)
 80004d0:	6093      	str	r3, [r2, #8]
	led_buffer[3] = minute % 10;
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <updateClockBuffer+0x7c>)
 80004d4:	6819      	ldr	r1, [r3, #0]
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <updateClockBuffer+0x74>)
 80004d8:	fb83 2301 	smull	r2, r3, r3, r1
 80004dc:	109a      	asrs	r2, r3, #2
 80004de:	17cb      	asrs	r3, r1, #31
 80004e0:	1ad2      	subs	r2, r2, r3
 80004e2:	4613      	mov	r3, r2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4413      	add	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	1aca      	subs	r2, r1, r3
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <updateClockBuffer+0x78>)
 80004ee:	60da      	str	r2, [r3, #12]

}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	200000d0 	.word	0x200000d0
 80004fc:	66666667 	.word	0x66666667
 8000500:	20000000 	.word	0x20000000
 8000504:	200000cc 	.word	0x200000cc

08000508 <update7SEG>:

 const int MAX_LED = 4;
 int index_led = 0;
 int led_buffer[4] = {1, 2, 3, 4};
 void update7SEG(int index){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b03      	cmp	r3, #3
 8000514:	d87a      	bhi.n	800060c <update7SEG+0x104>
 8000516:	a201      	add	r2, pc, #4	; (adr r2, 800051c <update7SEG+0x14>)
 8000518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051c:	0800052d 	.word	0x0800052d
 8000520:	08000565 	.word	0x08000565
 8000524:	0800059d 	.word	0x0800059d
 8000528:	080005d5 	.word	0x080005d5
	  switch (index){
	  case 0:
		  display7SEG(led_buffer[0]);
 800052c:	4b3a      	ldr	r3, [pc, #232]	; (8000618 <update7SEG+0x110>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	f000 f875 	bl	8000620 <display7SEG>
		  HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2140      	movs	r1, #64	; 0x40
 800053a:	4838      	ldr	r0, [pc, #224]	; (800061c <update7SEG+0x114>)
 800053c:	f001 f862 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2180      	movs	r1, #128	; 0x80
 8000544:	4835      	ldr	r0, [pc, #212]	; (800061c <update7SEG+0x114>)
 8000546:	f001 f85d 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000550:	4832      	ldr	r0, [pc, #200]	; (800061c <update7SEG+0x114>)
 8000552:	f001 f857 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SET);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055c:	482f      	ldr	r0, [pc, #188]	; (800061c <update7SEG+0x114>)
 800055e:	f001 f851 	bl	8001604 <HAL_GPIO_WritePin>
		  break;
 8000562:	e054      	b.n	800060e <update7SEG+0x106>
	  case 1:
		  display7SEG(led_buffer[1]);
 8000564:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <update7SEG+0x110>)
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f859 	bl	8000620 <display7SEG>
		  HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2140      	movs	r1, #64	; 0x40
 8000572:	482a      	ldr	r0, [pc, #168]	; (800061c <update7SEG+0x114>)
 8000574:	f001 f846 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	4827      	ldr	r0, [pc, #156]	; (800061c <update7SEG+0x114>)
 800057e:	f001 f841 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	4824      	ldr	r0, [pc, #144]	; (800061c <update7SEG+0x114>)
 800058a:	f001 f83b 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000594:	4821      	ldr	r0, [pc, #132]	; (800061c <update7SEG+0x114>)
 8000596:	f001 f835 	bl	8001604 <HAL_GPIO_WritePin>
		  break;
 800059a:	e038      	b.n	800060e <update7SEG+0x106>
	  case 2:
		  display7SEG(led_buffer[2]);
 800059c:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <update7SEG+0x110>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f83d 	bl	8000620 <display7SEG>
		  HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2140      	movs	r1, #64	; 0x40
 80005aa:	481c      	ldr	r0, [pc, #112]	; (800061c <update7SEG+0x114>)
 80005ac:	f001 f82a 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	4819      	ldr	r0, [pc, #100]	; (800061c <update7SEG+0x114>)
 80005b6:	f001 f825 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c0:	4816      	ldr	r0, [pc, #88]	; (800061c <update7SEG+0x114>)
 80005c2:	f001 f81f 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005cc:	4813      	ldr	r0, [pc, #76]	; (800061c <update7SEG+0x114>)
 80005ce:	f001 f819 	bl	8001604 <HAL_GPIO_WritePin>
		  break;
 80005d2:	e01c      	b.n	800060e <update7SEG+0x106>
	  case 3:
		  display7SEG(led_buffer[3]);
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <update7SEG+0x110>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f821 	bl	8000620 <display7SEG>
		  HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	2140      	movs	r1, #64	; 0x40
 80005e2:	480e      	ldr	r0, [pc, #56]	; (800061c <update7SEG+0x114>)
 80005e4:	f001 f80e 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2180      	movs	r1, #128	; 0x80
 80005ec:	480b      	ldr	r0, [pc, #44]	; (800061c <update7SEG+0x114>)
 80005ee:	f001 f809 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f8:	4808      	ldr	r0, [pc, #32]	; (800061c <update7SEG+0x114>)
 80005fa:	f001 f803 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <update7SEG+0x114>)
 8000606:	f000 fffd 	bl	8001604 <HAL_GPIO_WritePin>
		  break;
 800060a:	e000      	b.n	800060e <update7SEG+0x106>
	  default:
		  break;
 800060c:	bf00      	nop
	  }

}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000000 	.word	0x20000000
 800061c:	40010800 	.word	0x40010800

08000620 <display7SEG>:
 void display7SEG(int decimalVal) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b09      	cmp	r3, #9
 800062c:	f200 8180 	bhi.w	8000930 <display7SEG+0x310>
 8000630:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <display7SEG+0x18>)
 8000632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000636:	bf00      	nop
 8000638:	08000661 	.word	0x08000661
 800063c:	080006a9 	.word	0x080006a9
 8000640:	080006f1 	.word	0x080006f1
 8000644:	08000739 	.word	0x08000739
 8000648:	08000781 	.word	0x08000781
 800064c:	080007c9 	.word	0x080007c9
 8000650:	08000811 	.word	0x08000811
 8000654:	08000859 	.word	0x08000859
 8000658:	080008a1 	.word	0x080008a1
 800065c:	080008e9 	.word	0x080008e9
 	switch (decimalVal) {
 		case 0:
 			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2101      	movs	r1, #1
 8000664:	48b5      	ldr	r0, [pc, #724]	; (800093c <display7SEG+0x31c>)
 8000666:	f000 ffcd 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2102      	movs	r1, #2
 800066e:	48b3      	ldr	r0, [pc, #716]	; (800093c <display7SEG+0x31c>)
 8000670:	f000 ffc8 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2104      	movs	r1, #4
 8000678:	48b0      	ldr	r0, [pc, #704]	; (800093c <display7SEG+0x31c>)
 800067a:	f000 ffc3 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2108      	movs	r1, #8
 8000682:	48ae      	ldr	r0, [pc, #696]	; (800093c <display7SEG+0x31c>)
 8000684:	f000 ffbe 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2110      	movs	r1, #16
 800068c:	48ab      	ldr	r0, [pc, #684]	; (800093c <display7SEG+0x31c>)
 800068e:	f000 ffb9 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	48a9      	ldr	r0, [pc, #676]	; (800093c <display7SEG+0x31c>)
 8000698:	f000 ffb4 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 800069c:	2201      	movs	r2, #1
 800069e:	2140      	movs	r1, #64	; 0x40
 80006a0:	48a6      	ldr	r0, [pc, #664]	; (800093c <display7SEG+0x31c>)
 80006a2:	f000 ffaf 	bl	8001604 <HAL_GPIO_WritePin>
 			break;
 80006a6:	e144      	b.n	8000932 <display7SEG+0x312>
 		case 1:
 			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2101      	movs	r1, #1
 80006ac:	48a3      	ldr	r0, [pc, #652]	; (800093c <display7SEG+0x31c>)
 80006ae:	f000 ffa9 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2102      	movs	r1, #2
 80006b6:	48a1      	ldr	r0, [pc, #644]	; (800093c <display7SEG+0x31c>)
 80006b8:	f000 ffa4 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2104      	movs	r1, #4
 80006c0:	489e      	ldr	r0, [pc, #632]	; (800093c <display7SEG+0x31c>)
 80006c2:	f000 ff9f 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2108      	movs	r1, #8
 80006ca:	489c      	ldr	r0, [pc, #624]	; (800093c <display7SEG+0x31c>)
 80006cc:	f000 ff9a 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2110      	movs	r1, #16
 80006d4:	4899      	ldr	r0, [pc, #612]	; (800093c <display7SEG+0x31c>)
 80006d6:	f000 ff95 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	4897      	ldr	r0, [pc, #604]	; (800093c <display7SEG+0x31c>)
 80006e0:	f000 ff90 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2140      	movs	r1, #64	; 0x40
 80006e8:	4894      	ldr	r0, [pc, #592]	; (800093c <display7SEG+0x31c>)
 80006ea:	f000 ff8b 	bl	8001604 <HAL_GPIO_WritePin>
 			break;
 80006ee:	e120      	b.n	8000932 <display7SEG+0x312>
 		case 2:
 			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2101      	movs	r1, #1
 80006f4:	4891      	ldr	r0, [pc, #580]	; (800093c <display7SEG+0x31c>)
 80006f6:	f000 ff85 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2102      	movs	r1, #2
 80006fe:	488f      	ldr	r0, [pc, #572]	; (800093c <display7SEG+0x31c>)
 8000700:	f000 ff80 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2104      	movs	r1, #4
 8000708:	488c      	ldr	r0, [pc, #560]	; (800093c <display7SEG+0x31c>)
 800070a:	f000 ff7b 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2108      	movs	r1, #8
 8000712:	488a      	ldr	r0, [pc, #552]	; (800093c <display7SEG+0x31c>)
 8000714:	f000 ff76 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2110      	movs	r1, #16
 800071c:	4887      	ldr	r0, [pc, #540]	; (800093c <display7SEG+0x31c>)
 800071e:	f000 ff71 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2120      	movs	r1, #32
 8000726:	4885      	ldr	r0, [pc, #532]	; (800093c <display7SEG+0x31c>)
 8000728:	f000 ff6c 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2140      	movs	r1, #64	; 0x40
 8000730:	4882      	ldr	r0, [pc, #520]	; (800093c <display7SEG+0x31c>)
 8000732:	f000 ff67 	bl	8001604 <HAL_GPIO_WritePin>
 			break;
 8000736:	e0fc      	b.n	8000932 <display7SEG+0x312>
 		case 3:
 			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2101      	movs	r1, #1
 800073c:	487f      	ldr	r0, [pc, #508]	; (800093c <display7SEG+0x31c>)
 800073e:	f000 ff61 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2102      	movs	r1, #2
 8000746:	487d      	ldr	r0, [pc, #500]	; (800093c <display7SEG+0x31c>)
 8000748:	f000 ff5c 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2104      	movs	r1, #4
 8000750:	487a      	ldr	r0, [pc, #488]	; (800093c <display7SEG+0x31c>)
 8000752:	f000 ff57 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2108      	movs	r1, #8
 800075a:	4878      	ldr	r0, [pc, #480]	; (800093c <display7SEG+0x31c>)
 800075c:	f000 ff52 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2110      	movs	r1, #16
 8000764:	4875      	ldr	r0, [pc, #468]	; (800093c <display7SEG+0x31c>)
 8000766:	f000 ff4d 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2120      	movs	r1, #32
 800076e:	4873      	ldr	r0, [pc, #460]	; (800093c <display7SEG+0x31c>)
 8000770:	f000 ff48 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	4870      	ldr	r0, [pc, #448]	; (800093c <display7SEG+0x31c>)
 800077a:	f000 ff43 	bl	8001604 <HAL_GPIO_WritePin>
 			break;
 800077e:	e0d8      	b.n	8000932 <display7SEG+0x312>
 		case 4:
 			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 8000780:	2201      	movs	r2, #1
 8000782:	2101      	movs	r1, #1
 8000784:	486d      	ldr	r0, [pc, #436]	; (800093c <display7SEG+0x31c>)
 8000786:	f000 ff3d 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2102      	movs	r1, #2
 800078e:	486b      	ldr	r0, [pc, #428]	; (800093c <display7SEG+0x31c>)
 8000790:	f000 ff38 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2104      	movs	r1, #4
 8000798:	4868      	ldr	r0, [pc, #416]	; (800093c <display7SEG+0x31c>)
 800079a:	f000 ff33 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	2108      	movs	r1, #8
 80007a2:	4866      	ldr	r0, [pc, #408]	; (800093c <display7SEG+0x31c>)
 80007a4:	f000 ff2e 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2110      	movs	r1, #16
 80007ac:	4863      	ldr	r0, [pc, #396]	; (800093c <display7SEG+0x31c>)
 80007ae:	f000 ff29 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	4861      	ldr	r0, [pc, #388]	; (800093c <display7SEG+0x31c>)
 80007b8:	f000 ff24 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2140      	movs	r1, #64	; 0x40
 80007c0:	485e      	ldr	r0, [pc, #376]	; (800093c <display7SEG+0x31c>)
 80007c2:	f000 ff1f 	bl	8001604 <HAL_GPIO_WritePin>
 			break;
 80007c6:	e0b4      	b.n	8000932 <display7SEG+0x312>
 		case 5:
 			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2101      	movs	r1, #1
 80007cc:	485b      	ldr	r0, [pc, #364]	; (800093c <display7SEG+0x31c>)
 80007ce:	f000 ff19 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2102      	movs	r1, #2
 80007d6:	4859      	ldr	r0, [pc, #356]	; (800093c <display7SEG+0x31c>)
 80007d8:	f000 ff14 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2104      	movs	r1, #4
 80007e0:	4856      	ldr	r0, [pc, #344]	; (800093c <display7SEG+0x31c>)
 80007e2:	f000 ff0f 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2108      	movs	r1, #8
 80007ea:	4854      	ldr	r0, [pc, #336]	; (800093c <display7SEG+0x31c>)
 80007ec:	f000 ff0a 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2110      	movs	r1, #16
 80007f4:	4851      	ldr	r0, [pc, #324]	; (800093c <display7SEG+0x31c>)
 80007f6:	f000 ff05 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	484f      	ldr	r0, [pc, #316]	; (800093c <display7SEG+0x31c>)
 8000800:	f000 ff00 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	484c      	ldr	r0, [pc, #304]	; (800093c <display7SEG+0x31c>)
 800080a:	f000 fefb 	bl	8001604 <HAL_GPIO_WritePin>
 			break;
 800080e:	e090      	b.n	8000932 <display7SEG+0x312>
 		case 6:
 			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2101      	movs	r1, #1
 8000814:	4849      	ldr	r0, [pc, #292]	; (800093c <display7SEG+0x31c>)
 8000816:	f000 fef5 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2102      	movs	r1, #2
 800081e:	4847      	ldr	r0, [pc, #284]	; (800093c <display7SEG+0x31c>)
 8000820:	f000 fef0 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2104      	movs	r1, #4
 8000828:	4844      	ldr	r0, [pc, #272]	; (800093c <display7SEG+0x31c>)
 800082a:	f000 feeb 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2108      	movs	r1, #8
 8000832:	4842      	ldr	r0, [pc, #264]	; (800093c <display7SEG+0x31c>)
 8000834:	f000 fee6 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	2110      	movs	r1, #16
 800083c:	483f      	ldr	r0, [pc, #252]	; (800093c <display7SEG+0x31c>)
 800083e:	f000 fee1 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	483d      	ldr	r0, [pc, #244]	; (800093c <display7SEG+0x31c>)
 8000848:	f000 fedc 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	483a      	ldr	r0, [pc, #232]	; (800093c <display7SEG+0x31c>)
 8000852:	f000 fed7 	bl	8001604 <HAL_GPIO_WritePin>
 			break;
 8000856:	e06c      	b.n	8000932 <display7SEG+0x312>
 		case 7:
 			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2101      	movs	r1, #1
 800085c:	4837      	ldr	r0, [pc, #220]	; (800093c <display7SEG+0x31c>)
 800085e:	f000 fed1 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2102      	movs	r1, #2
 8000866:	4835      	ldr	r0, [pc, #212]	; (800093c <display7SEG+0x31c>)
 8000868:	f000 fecc 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2104      	movs	r1, #4
 8000870:	4832      	ldr	r0, [pc, #200]	; (800093c <display7SEG+0x31c>)
 8000872:	f000 fec7 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8000876:	2201      	movs	r2, #1
 8000878:	2108      	movs	r1, #8
 800087a:	4830      	ldr	r0, [pc, #192]	; (800093c <display7SEG+0x31c>)
 800087c:	f000 fec2 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000880:	2201      	movs	r2, #1
 8000882:	2110      	movs	r1, #16
 8000884:	482d      	ldr	r0, [pc, #180]	; (800093c <display7SEG+0x31c>)
 8000886:	f000 febd 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 800088a:	2201      	movs	r2, #1
 800088c:	2120      	movs	r1, #32
 800088e:	482b      	ldr	r0, [pc, #172]	; (800093c <display7SEG+0x31c>)
 8000890:	f000 feb8 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2140      	movs	r1, #64	; 0x40
 8000898:	4828      	ldr	r0, [pc, #160]	; (800093c <display7SEG+0x31c>)
 800089a:	f000 feb3 	bl	8001604 <HAL_GPIO_WritePin>
 			break;
 800089e:	e048      	b.n	8000932 <display7SEG+0x312>
 		case 8:
 			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	4825      	ldr	r0, [pc, #148]	; (800093c <display7SEG+0x31c>)
 80008a6:	f000 fead 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2102      	movs	r1, #2
 80008ae:	4823      	ldr	r0, [pc, #140]	; (800093c <display7SEG+0x31c>)
 80008b0:	f000 fea8 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2104      	movs	r1, #4
 80008b8:	4820      	ldr	r0, [pc, #128]	; (800093c <display7SEG+0x31c>)
 80008ba:	f000 fea3 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	481e      	ldr	r0, [pc, #120]	; (800093c <display7SEG+0x31c>)
 80008c4:	f000 fe9e 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2110      	movs	r1, #16
 80008cc:	481b      	ldr	r0, [pc, #108]	; (800093c <display7SEG+0x31c>)
 80008ce:	f000 fe99 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2120      	movs	r1, #32
 80008d6:	4819      	ldr	r0, [pc, #100]	; (800093c <display7SEG+0x31c>)
 80008d8:	f000 fe94 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2140      	movs	r1, #64	; 0x40
 80008e0:	4816      	ldr	r0, [pc, #88]	; (800093c <display7SEG+0x31c>)
 80008e2:	f000 fe8f 	bl	8001604 <HAL_GPIO_WritePin>
 			break;
 80008e6:	e024      	b.n	8000932 <display7SEG+0x312>
 		case 9:
 			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2101      	movs	r1, #1
 80008ec:	4813      	ldr	r0, [pc, #76]	; (800093c <display7SEG+0x31c>)
 80008ee:	f000 fe89 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2102      	movs	r1, #2
 80008f6:	4811      	ldr	r0, [pc, #68]	; (800093c <display7SEG+0x31c>)
 80008f8:	f000 fe84 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2104      	movs	r1, #4
 8000900:	480e      	ldr	r0, [pc, #56]	; (800093c <display7SEG+0x31c>)
 8000902:	f000 fe7f 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <display7SEG+0x31c>)
 800090c:	f000 fe7a 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2110      	movs	r1, #16
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <display7SEG+0x31c>)
 8000916:	f000 fe75 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <display7SEG+0x31c>)
 8000920:	f000 fe70 	bl	8001604 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2140      	movs	r1, #64	; 0x40
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <display7SEG+0x31c>)
 800092a:	f000 fe6b 	bl	8001604 <HAL_GPIO_WritePin>
 			break;
 800092e:	e000      	b.n	8000932 <display7SEG+0x312>
 		default:
 			break;
 8000930:	bf00      	nop
 		}


 }
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40010c00 	.word	0x40010c00

08000940 <rstMatrix>:
 void rstMatrix(){
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(GPIOB, ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW0_Pin|ROW1_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <rstMatrix+0x20>)
 800094c:	f000 fe5a 	bl	8001604 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOA,ENM0_Pin|ENM1_Pin|ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin|ENM6_Pin|ENM7_Pin, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	f64f 410c 	movw	r1, #64524	; 0xfc0c
 8000956:	4803      	ldr	r0, [pc, #12]	; (8000964 <rstMatrix+0x24>)
 8000958:	f000 fe54 	bl	8001604 <HAL_GPIO_WritePin>
 }
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40010c00 	.word	0x40010c00
 8000964:	40010800 	.word	0x40010800

08000968 <updateLEDMatrix>:
 void updateLEDMatrix (int index ){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	rstMatrix();
 8000970:	f7ff ffe6 	bl	8000940 <rstMatrix>
	HAL_GPIO_WritePin(GPIOB,matrix_buffer[index], GPIO_PIN_RESET);
 8000974:	4ace      	ldr	r2, [pc, #824]	; (8000cb0 <updateLEDMatrix+0x348>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097c:	2200      	movs	r2, #0
 800097e:	4619      	mov	r1, r3
 8000980:	48cc      	ldr	r0, [pc, #816]	; (8000cb4 <updateLEDMatrix+0x34c>)
 8000982:	f000 fe3f 	bl	8001604 <HAL_GPIO_WritePin>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b33      	cmp	r3, #51	; 0x33
 800098a:	f200 81c8 	bhi.w	8000d1e <updateLEDMatrix+0x3b6>
 800098e:	a201      	add	r2, pc, #4	; (adr r2, 8000994 <updateLEDMatrix+0x2c>)
 8000990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000994:	08000d1f 	.word	0x08000d1f
 8000998:	08000a65 	.word	0x08000a65
 800099c:	08000a71 	.word	0x08000a71
 80009a0:	08000a7d 	.word	0x08000a7d
 80009a4:	08000a89 	.word	0x08000a89
 80009a8:	08000a95 	.word	0x08000a95
 80009ac:	08000aa1 	.word	0x08000aa1
 80009b0:	08000aaf 	.word	0x08000aaf
 80009b4:	08000abb 	.word	0x08000abb
 80009b8:	08000ac7 	.word	0x08000ac7
 80009bc:	08000ad5 	.word	0x08000ad5
 80009c0:	08000ae3 	.word	0x08000ae3
 80009c4:	08000aef 	.word	0x08000aef
 80009c8:	08000afb 	.word	0x08000afb
 80009cc:	08000b09 	.word	0x08000b09
 80009d0:	08000b17 	.word	0x08000b17
 80009d4:	08000b25 	.word	0x08000b25
 80009d8:	08000b31 	.word	0x08000b31
 80009dc:	08000b3d 	.word	0x08000b3d
 80009e0:	08000b4b 	.word	0x08000b4b
 80009e4:	08000b59 	.word	0x08000b59
 80009e8:	08000b67 	.word	0x08000b67
 80009ec:	08000b75 	.word	0x08000b75
 80009f0:	08000b81 	.word	0x08000b81
 80009f4:	08000b8d 	.word	0x08000b8d
 80009f8:	08000b9b 	.word	0x08000b9b
 80009fc:	08000ba9 	.word	0x08000ba9
 8000a00:	08000bb7 	.word	0x08000bb7
 8000a04:	08000bc5 	.word	0x08000bc5
 8000a08:	08000bd3 	.word	0x08000bd3
 8000a0c:	08000bdf 	.word	0x08000bdf
 8000a10:	08000beb 	.word	0x08000beb
 8000a14:	08000bf9 	.word	0x08000bf9
 8000a18:	08000c07 	.word	0x08000c07
 8000a1c:	08000c15 	.word	0x08000c15
 8000a20:	08000c23 	.word	0x08000c23
 8000a24:	08000c31 	.word	0x08000c31
 8000a28:	08000c3f 	.word	0x08000c3f
 8000a2c:	08000c4d 	.word	0x08000c4d
 8000a30:	08000c5b 	.word	0x08000c5b
 8000a34:	08000c69 	.word	0x08000c69
 8000a38:	08000c77 	.word	0x08000c77
 8000a3c:	08000c85 	.word	0x08000c85
 8000a40:	08000c93 	.word	0x08000c93
 8000a44:	08000ca1 	.word	0x08000ca1
 8000a48:	08000cbd 	.word	0x08000cbd
 8000a4c:	08000ccb 	.word	0x08000ccb
 8000a50:	08000cd9 	.word	0x08000cd9
 8000a54:	08000ce7 	.word	0x08000ce7
 8000a58:	08000cf5 	.word	0x08000cf5
 8000a5c:	08000d03 	.word	0x08000d03
 8000a60:	08000d11 	.word	0x08000d11
	switch ( index ){
	case 0:
		break;
	case 1:
		HAL_GPIO_WritePin(GPIOA,ENM0_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2104      	movs	r1, #4
 8000a68:	4893      	ldr	r0, [pc, #588]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000a6a:	f000 fdcb 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000a6e:	e157      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 2:
		HAL_GPIO_WritePin(GPIOA,ENM0_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2104      	movs	r1, #4
 8000a74:	4890      	ldr	r0, [pc, #576]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000a76:	f000 fdc5 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000a7a:	e151      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 3:
		HAL_GPIO_WritePin(GPIOA,ENM1_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2108      	movs	r1, #8
 8000a80:	488d      	ldr	r0, [pc, #564]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000a82:	f000 fdbf 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000a86:	e14b      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 4:
		HAL_GPIO_WritePin(GPIOA,ENM0_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	488a      	ldr	r0, [pc, #552]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000a8e:	f000 fdb9 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000a92:	e145      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 5:
		HAL_GPIO_WritePin(GPIOA,ENM1_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2108      	movs	r1, #8
 8000a98:	4887      	ldr	r0, [pc, #540]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000a9a:	f000 fdb3 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000a9e:	e13f      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 6:
		HAL_GPIO_WritePin(GPIOA,ENM2_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa6:	4884      	ldr	r0, [pc, #528]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000aa8:	f000 fdac 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000aac:	e138      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 7:
		HAL_GPIO_WritePin(GPIOA,ENM0_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	4881      	ldr	r0, [pc, #516]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000ab4:	f000 fda6 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000ab8:	e132      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 8:
		HAL_GPIO_WritePin(GPIOA,ENM1_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2108      	movs	r1, #8
 8000abe:	487e      	ldr	r0, [pc, #504]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000ac0:	f000 fda0 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000ac4:	e12c      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 9:
		HAL_GPIO_WritePin(GPIOA,ENM2_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000acc:	487a      	ldr	r0, [pc, #488]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000ace:	f000 fd99 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000ad2:	e125      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 10:
		HAL_GPIO_WritePin(GPIOA,ENM3_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ada:	4877      	ldr	r0, [pc, #476]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000adc:	f000 fd92 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000ae0:	e11e      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 11:
		HAL_GPIO_WritePin(GPIOA,ENM0_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	4874      	ldr	r0, [pc, #464]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000ae8:	f000 fd8c 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000aec:	e118      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 12:
		HAL_GPIO_WritePin(GPIOA,ENM1_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2108      	movs	r1, #8
 8000af2:	4871      	ldr	r0, [pc, #452]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000af4:	f000 fd86 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000af8:	e112      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 13:
		HAL_GPIO_WritePin(GPIOA,ENM2_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b00:	486d      	ldr	r0, [pc, #436]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000b02:	f000 fd7f 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000b06:	e10b      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 14:
		HAL_GPIO_WritePin(GPIOA,ENM3_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0e:	486a      	ldr	r0, [pc, #424]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000b10:	f000 fd78 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000b14:	e104      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 15:
		HAL_GPIO_WritePin(GPIOA,ENM4_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1c:	4866      	ldr	r0, [pc, #408]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000b1e:	f000 fd71 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000b22:	e0fd      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 16:
		HAL_GPIO_WritePin(GPIOA,ENM0_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2104      	movs	r1, #4
 8000b28:	4863      	ldr	r0, [pc, #396]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000b2a:	f000 fd6b 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000b2e:	e0f7      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 17:
		HAL_GPIO_WritePin(GPIOA,ENM1_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2108      	movs	r1, #8
 8000b34:	4860      	ldr	r0, [pc, #384]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000b36:	f000 fd65 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000b3a:	e0f1      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 18:
		HAL_GPIO_WritePin(GPIOA,ENM2_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b42:	485d      	ldr	r0, [pc, #372]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000b44:	f000 fd5e 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000b48:	e0ea      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 19:
		HAL_GPIO_WritePin(GPIOA,ENM3_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b50:	4859      	ldr	r0, [pc, #356]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000b52:	f000 fd57 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000b56:	e0e3      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 20:
		HAL_GPIO_WritePin(GPIOA,ENM4_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b5e:	4856      	ldr	r0, [pc, #344]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000b60:	f000 fd50 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000b64:	e0dc      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 21:
		HAL_GPIO_WritePin(GPIOA,ENM5_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6c:	4852      	ldr	r0, [pc, #328]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000b6e:	f000 fd49 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000b72:	e0d5      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 22:
		HAL_GPIO_WritePin(GPIOA,ENM0_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2104      	movs	r1, #4
 8000b78:	484f      	ldr	r0, [pc, #316]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000b7a:	f000 fd43 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000b7e:	e0cf      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 23:
		HAL_GPIO_WritePin(GPIOA,ENM1_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2108      	movs	r1, #8
 8000b84:	484c      	ldr	r0, [pc, #304]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000b86:	f000 fd3d 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000b8a:	e0c9      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 24:
		HAL_GPIO_WritePin(GPIOA,ENM2_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b92:	4849      	ldr	r0, [pc, #292]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000b94:	f000 fd36 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000b98:	e0c2      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 25:
		HAL_GPIO_WritePin(GPIOA,ENM3_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba0:	4845      	ldr	r0, [pc, #276]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000ba2:	f000 fd2f 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000ba6:	e0bb      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 26:
		HAL_GPIO_WritePin(GPIOA,ENM4_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bae:	4842      	ldr	r0, [pc, #264]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000bb0:	f000 fd28 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000bb4:	e0b4      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 27:
		HAL_GPIO_WritePin(GPIOA,ENM5_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bbc:	483e      	ldr	r0, [pc, #248]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000bbe:	f000 fd21 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000bc2:	e0ad      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 28:
		HAL_GPIO_WritePin(GPIOA,ENM6_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bca:	483b      	ldr	r0, [pc, #236]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000bcc:	f000 fd1a 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000bd0:	e0a6      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 29:
		HAL_GPIO_WritePin(GPIOA,ENM0_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	4838      	ldr	r0, [pc, #224]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000bd8:	f000 fd14 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000bdc:	e0a0      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 30:
		HAL_GPIO_WritePin(GPIOA,ENM1_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2108      	movs	r1, #8
 8000be2:	4835      	ldr	r0, [pc, #212]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000be4:	f000 fd0e 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000be8:	e09a      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 31:
		HAL_GPIO_WritePin(GPIOA,ENM2_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf0:	4831      	ldr	r0, [pc, #196]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000bf2:	f000 fd07 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000bf6:	e093      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 32:
		HAL_GPIO_WritePin(GPIOA,ENM3_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bfe:	482e      	ldr	r0, [pc, #184]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000c00:	f000 fd00 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000c04:	e08c      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 33:
		HAL_GPIO_WritePin(GPIOA,ENM4_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0c:	482a      	ldr	r0, [pc, #168]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000c0e:	f000 fcf9 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000c12:	e085      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 34:
		HAL_GPIO_WritePin(GPIOA,ENM5_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1a:	4827      	ldr	r0, [pc, #156]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000c1c:	f000 fcf2 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000c20:	e07e      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 35:
		HAL_GPIO_WritePin(GPIOA,ENM6_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c28:	4823      	ldr	r0, [pc, #140]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000c2a:	f000 fceb 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000c2e:	e077      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 36:
		HAL_GPIO_WritePin(GPIOA,ENM7_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c36:	4820      	ldr	r0, [pc, #128]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000c38:	f000 fce4 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000c3c:	e070      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 37:
		HAL_GPIO_WritePin(GPIOA,ENM3_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c44:	481c      	ldr	r0, [pc, #112]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000c46:	f000 fcdd 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000c4a:	e069      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 38:
		HAL_GPIO_WritePin(GPIOA,ENM4_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c52:	4819      	ldr	r0, [pc, #100]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000c54:	f000 fcd6 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000c58:	e062      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 39:
		HAL_GPIO_WritePin(GPIOA,ENM5_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c60:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000c62:	f000 fccf 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000c66:	e05b      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 40:
		HAL_GPIO_WritePin(GPIOA,ENM6_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6e:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000c70:	f000 fcc8 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000c74:	e054      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 41:
		HAL_GPIO_WritePin(GPIOA,ENM7_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c7c:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000c7e:	f000 fcc1 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000c82:	e04d      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 42:
		HAL_GPIO_WritePin(GPIOA,ENM4_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8a:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000c8c:	f000 fcba 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000c90:	e046      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 43:
		HAL_GPIO_WritePin(GPIOA,ENM5_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c98:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000c9a:	f000 fcb3 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000c9e:	e03f      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 44:
		HAL_GPIO_WritePin(GPIOA,ENM6_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <updateLEDMatrix+0x350>)
 8000ca8:	f000 fcac 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000cac:	e038      	b.n	8000d20 <updateLEDMatrix+0x3b8>
 8000cae:	bf00      	nop
 8000cb0:	20000010 	.word	0x20000010
 8000cb4:	40010c00 	.word	0x40010c00
 8000cb8:	40010800 	.word	0x40010800
	case 45:
		HAL_GPIO_WritePin(GPIOA,ENM7_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc2:	4819      	ldr	r0, [pc, #100]	; (8000d28 <updateLEDMatrix+0x3c0>)
 8000cc4:	f000 fc9e 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000cc8:	e02a      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 46:
		HAL_GPIO_WritePin(GPIOA,ENM5_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd0:	4815      	ldr	r0, [pc, #84]	; (8000d28 <updateLEDMatrix+0x3c0>)
 8000cd2:	f000 fc97 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000cd6:	e023      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 47:
		HAL_GPIO_WritePin(GPIOA,ENM6_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cde:	4812      	ldr	r0, [pc, #72]	; (8000d28 <updateLEDMatrix+0x3c0>)
 8000ce0:	f000 fc90 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000ce4:	e01c      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 48:
		HAL_GPIO_WritePin(GPIOA,ENM7_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cec:	480e      	ldr	r0, [pc, #56]	; (8000d28 <updateLEDMatrix+0x3c0>)
 8000cee:	f000 fc89 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000cf2:	e015      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 49:
		HAL_GPIO_WritePin(GPIOA,ENM6_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cfa:	480b      	ldr	r0, [pc, #44]	; (8000d28 <updateLEDMatrix+0x3c0>)
 8000cfc:	f000 fc82 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000d00:	e00e      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 50:
		HAL_GPIO_WritePin(GPIOA,ENM7_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d08:	4807      	ldr	r0, [pc, #28]	; (8000d28 <updateLEDMatrix+0x3c0>)
 8000d0a:	f000 fc7b 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000d0e:	e007      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	case 51:
		HAL_GPIO_WritePin(GPIOA,ENM7_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d16:	4804      	ldr	r0, [pc, #16]	; (8000d28 <updateLEDMatrix+0x3c0>)
 8000d18:	f000 fc74 	bl	8001604 <HAL_GPIO_WritePin>
		break;
 8000d1c:	e000      	b.n	8000d20 <updateLEDMatrix+0x3b8>
	default:
		break;
 8000d1e:	bf00      	nop
	}
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40010800 	.word	0x40010800

08000d2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	timer1Run();
 8000d34:	f000 f824 	bl	8000d80 <timer1Run>
	timer2Run();
 8000d38:	f000 f850 	bl	8000ddc <timer2Run>
	timer3Run();
 8000d3c:	f000 f87c 	bl	8000e38 <timer3Run>
	timer4Run();
 8000d40:	f000 f8a8 	bl	8000e94 <timer4Run>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <setTimer1>:
 */
#include "software_timer.h"
int timer1_counter = 0;
int timer1_flag = 0;

void setTimer1(int duration) {
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000d60:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <setTimer1+0x20>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <setTimer1+0x24>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200000a8 	.word	0x200000a8
 8000d7c:	200000ac 	.word	0x200000ac

08000d80 <timer1Run>:
void timer1Run(){
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <timer1Run+0x2c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	dd0b      	ble.n	8000da4 <timer1Run+0x24>
		timer1_counter--;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <timer1Run+0x2c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	4a06      	ldr	r2, [pc, #24]	; (8000dac <timer1Run+0x2c>)
 8000d94:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <timer1Run+0x2c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	dc02      	bgt.n	8000da4 <timer1Run+0x24>
			timer1_flag =1;
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <timer1Run+0x30>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	200000a8 	.word	0x200000a8
 8000db0:	200000ac 	.word	0x200000ac

08000db4 <setTimer2>:
int timer2_counter = 0;
int timer2_flag = 0;
void setTimer2(int duration2) {
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	timer2_counter = duration2;
 8000dbc:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <setTimer2+0x20>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <setTimer2+0x24>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	200000b0 	.word	0x200000b0
 8000dd8:	200000b4 	.word	0x200000b4

08000ddc <timer2Run>:
void timer2Run(){
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	if(timer2_counter > 0) {
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <timer2Run+0x2c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	dd0b      	ble.n	8000e00 <timer2Run+0x24>
		timer2_counter--;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <timer2Run+0x2c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <timer2Run+0x2c>)
 8000df0:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <timer2Run+0x2c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	dc02      	bgt.n	8000e00 <timer2Run+0x24>
			timer2_flag =1;
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <timer2Run+0x30>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	200000b0 	.word	0x200000b0
 8000e0c:	200000b4 	.word	0x200000b4

08000e10 <setTimer3>:
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer3(int duration3) {
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	timer3_counter = duration3;
 8000e18:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <setTimer3+0x20>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <setTimer3+0x24>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	200000b8 	.word	0x200000b8
 8000e34:	200000bc 	.word	0x200000bc

08000e38 <timer3Run>:
void timer3Run() {
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	if (timer3_counter > 0) {
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <timer3Run+0x2c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	dd0b      	ble.n	8000e5c <timer3Run+0x24>
		timer3_counter--;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <timer3Run+0x2c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <timer3Run+0x2c>)
 8000e4c:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <timer3Run+0x2c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dc02      	bgt.n	8000e5c <timer3Run+0x24>
			timer3_flag = 1;
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <timer3Run+0x30>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	200000b8 	.word	0x200000b8
 8000e68:	200000bc 	.word	0x200000bc

08000e6c <setTimer4>:
int timer4_counter = 0;
int timer4_flag = 0;

void setTimer4(int duration4) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	timer4_counter = duration4;
 8000e74:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <setTimer4+0x20>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <setTimer4+0x24>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200000c0 	.word	0x200000c0
 8000e90:	200000c4 	.word	0x200000c4

08000e94 <timer4Run>:
void timer4Run() {
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	if (timer4_counter > 0) {
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <timer4Run+0x2c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	dd0b      	ble.n	8000eb8 <timer4Run+0x24>
		timer4_counter--;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <timer4Run+0x2c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <timer4Run+0x2c>)
 8000ea8:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <timer4Run+0x2c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	dc02      	bgt.n	8000eb8 <timer4Run+0x24>
			timer4_flag = 1;
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <timer4Run+0x30>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	200000c0 	.word	0x200000c0
 8000ec4:	200000c4 	.word	0x200000c4

08000ec8 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE();
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6193      	str	r3, [r2, #24]
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_MspInit+0x5c>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_MspInit+0x5c>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	61d3      	str	r3, [r2, #28]
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/

	/** DISABLE: JTAG-DP Disabled and SW-DP Disabled
	 */
	__HAL_AFIO_REMAP_SWJ_DISABLE();
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_MspInit+0x60>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_MspInit+0x60>)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010000 	.word	0x40010000

08000f2c <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM2) {
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f3c:	d113      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0x3a>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_TIM_Base_MspInit+0x44>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_TIM_Base_MspInit+0x44>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	61d3      	str	r3, [r2, #28]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_TIM_Base_MspInit+0x44>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
		/* TIM2 interrupt Init */
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	201c      	movs	r0, #28
 8000f5c:	f000 f9a1 	bl	80012a2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f60:	201c      	movs	r0, #28
 8000f62:	f000 f9ba 	bl	80012da <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}

}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000fba:	f000 f87f 	bl	80010bc <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <TIM2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <TIM2_IRQHandler+0x10>)
 8000fca:	f000 ffc5 	bl	8001f58 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000d4 	.word	0x200000d4

08000fd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe4:	f7ff fff8 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fea:	490c      	ldr	r1, [pc, #48]	; (800101c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fec:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001000:	4c09      	ldr	r4, [pc, #36]	; (8001028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100e:	f001 faef 	bl	80025f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001012:	f7ff f89b 	bl	800014c <main>
  bx lr
 8001016:	4770      	bx	lr
  ldr r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800101c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001020:	0800268c 	.word	0x0800268c
  ldr r2, =_sbss
 8001024:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001028:	20000120 	.word	0x20000120

0800102c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC1_2_IRQHandler>
	...

08001030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_Init+0x28>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_Init+0x28>)
 800103a:	f043 0310 	orr.w	r3, r3, #16
 800103e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f923 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	200f      	movs	r0, #15
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff ff3c 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40022000 	.word	0x40022000

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f93b 	bl	80012f6 <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 f903 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000078 	.word	0x20000078
 80010b4:	20000080 	.word	0x20000080
 80010b8:	2000007c 	.word	0x2000007c

080010bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_IncTick+0x1c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_IncTick+0x20>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a03      	ldr	r2, [pc, #12]	; (80010dc <HAL_IncTick+0x20>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	20000080 	.word	0x20000080
 80010dc:	2000011c 	.word	0x2000011c

080010e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <HAL_GetTick+0x10>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	2000011c 	.word	0x2000011c

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800111c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4906      	ldr	r1, [pc, #24]	; (800118c <__NVIC_EnableIRQ+0x34>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	; (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	; (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff90 	bl	8001190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff2d 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff42 	bl	800113c <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff90 	bl	80011e4 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5f 	bl	8001190 <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff35 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffa2 	bl	8001248 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_GPIO_Init>:
 * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8001310:	b480      	push	{r7}
 8001312:	b08b      	sub	sp, #44	; 0x2c
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00u;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ioposition;
	uint32_t iocurrent;
	uint32_t temp;
	uint32_t config = 0x00u;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 8001322:	e148      	b.n	80015b6 <HAL_GPIO_Init+0x2a6>
		/* Get the IO position */
		ioposition = (0x01uL << position);
 8001324:	2201      	movs	r2, #1
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	61fb      	str	r3, [r7, #28]

		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]

		if (iocurrent == ioposition) {
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	429a      	cmp	r2, r3
 800133e:	f040 8137 	bne.w	80015b0 <HAL_GPIO_Init+0x2a0>
			/* Check the Alternate function parameters */
			assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

			/* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
			switch (GPIO_Init->Mode) {
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4aa3      	ldr	r2, [pc, #652]	; (80015d4 <HAL_GPIO_Init+0x2c4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d05e      	beq.n	800140a <HAL_GPIO_Init+0xfa>
 800134c:	4aa1      	ldr	r2, [pc, #644]	; (80015d4 <HAL_GPIO_Init+0x2c4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d875      	bhi.n	800143e <HAL_GPIO_Init+0x12e>
 8001352:	4aa1      	ldr	r2, [pc, #644]	; (80015d8 <HAL_GPIO_Init+0x2c8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d058      	beq.n	800140a <HAL_GPIO_Init+0xfa>
 8001358:	4a9f      	ldr	r2, [pc, #636]	; (80015d8 <HAL_GPIO_Init+0x2c8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d86f      	bhi.n	800143e <HAL_GPIO_Init+0x12e>
 800135e:	4a9f      	ldr	r2, [pc, #636]	; (80015dc <HAL_GPIO_Init+0x2cc>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d052      	beq.n	800140a <HAL_GPIO_Init+0xfa>
 8001364:	4a9d      	ldr	r2, [pc, #628]	; (80015dc <HAL_GPIO_Init+0x2cc>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d869      	bhi.n	800143e <HAL_GPIO_Init+0x12e>
 800136a:	4a9d      	ldr	r2, [pc, #628]	; (80015e0 <HAL_GPIO_Init+0x2d0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d04c      	beq.n	800140a <HAL_GPIO_Init+0xfa>
 8001370:	4a9b      	ldr	r2, [pc, #620]	; (80015e0 <HAL_GPIO_Init+0x2d0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d863      	bhi.n	800143e <HAL_GPIO_Init+0x12e>
 8001376:	4a9b      	ldr	r2, [pc, #620]	; (80015e4 <HAL_GPIO_Init+0x2d4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d046      	beq.n	800140a <HAL_GPIO_Init+0xfa>
 800137c:	4a99      	ldr	r2, [pc, #612]	; (80015e4 <HAL_GPIO_Init+0x2d4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d85d      	bhi.n	800143e <HAL_GPIO_Init+0x12e>
 8001382:	2b12      	cmp	r3, #18
 8001384:	d82a      	bhi.n	80013dc <HAL_GPIO_Init+0xcc>
 8001386:	2b12      	cmp	r3, #18
 8001388:	d859      	bhi.n	800143e <HAL_GPIO_Init+0x12e>
 800138a:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <HAL_GPIO_Init+0x80>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	0800140b 	.word	0x0800140b
 8001394:	080013e5 	.word	0x080013e5
 8001398:	080013f7 	.word	0x080013f7
 800139c:	08001439 	.word	0x08001439
 80013a0:	0800143f 	.word	0x0800143f
 80013a4:	0800143f 	.word	0x0800143f
 80013a8:	0800143f 	.word	0x0800143f
 80013ac:	0800143f 	.word	0x0800143f
 80013b0:	0800143f 	.word	0x0800143f
 80013b4:	0800143f 	.word	0x0800143f
 80013b8:	0800143f 	.word	0x0800143f
 80013bc:	0800143f 	.word	0x0800143f
 80013c0:	0800143f 	.word	0x0800143f
 80013c4:	0800143f 	.word	0x0800143f
 80013c8:	0800143f 	.word	0x0800143f
 80013cc:	0800143f 	.word	0x0800143f
 80013d0:	0800143f 	.word	0x0800143f
 80013d4:	080013ed 	.word	0x080013ed
 80013d8:	08001401 	.word	0x08001401
 80013dc:	4a82      	ldr	r2, [pc, #520]	; (80015e8 <HAL_GPIO_Init+0x2d8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_GPIO_Init+0xfa>
				config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
				break;

				/* Parameters are checked with assert_param */
			default:
				break;
 80013e2:	e02c      	b.n	800143e <HAL_GPIO_Init+0x12e>
				config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	623b      	str	r3, [r7, #32]
				break;
 80013ea:	e029      	b.n	8001440 <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	3304      	adds	r3, #4
 80013f2:	623b      	str	r3, [r7, #32]
				break;
 80013f4:	e024      	b.n	8001440 <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	3308      	adds	r3, #8
 80013fc:	623b      	str	r3, [r7, #32]
				break;
 80013fe:	e01f      	b.n	8001440 <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	330c      	adds	r3, #12
 8001406:	623b      	str	r3, [r7, #32]
				break;
 8001408:	e01a      	b.n	8001440 <HAL_GPIO_Init+0x130>
				if (GPIO_Init->Pull == GPIO_NOPULL) {
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d102      	bne.n	8001418 <HAL_GPIO_Init+0x108>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001412:	2304      	movs	r3, #4
 8001414:	623b      	str	r3, [r7, #32]
				break;
 8001416:	e013      	b.n	8001440 <HAL_GPIO_Init+0x130>
				} else if (GPIO_Init->Pull == GPIO_PULLUP) {
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d105      	bne.n	800142c <HAL_GPIO_Init+0x11c>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001420:	2308      	movs	r3, #8
 8001422:	623b      	str	r3, [r7, #32]
					GPIOx->BSRR = ioposition;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69fa      	ldr	r2, [r7, #28]
 8001428:	611a      	str	r2, [r3, #16]
				break;
 800142a:	e009      	b.n	8001440 <HAL_GPIO_Init+0x130>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800142c:	2308      	movs	r3, #8
 800142e:	623b      	str	r3, [r7, #32]
					GPIOx->BRR = ioposition;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	615a      	str	r2, [r3, #20]
				break;
 8001436:	e003      	b.n	8001440 <HAL_GPIO_Init+0x130>
				config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
				break;
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x130>
				break;
 800143e:	bf00      	nop
			}

			/* Check if the current bit belongs to first half or last half of the pin count number
			 in order to address CRH or CRL register*/
			configregister =
					(iocurrent < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2bff      	cmp	r3, #255	; 0xff
 8001444:	d801      	bhi.n	800144a <HAL_GPIO_Init+0x13a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	e001      	b.n	800144e <HAL_GPIO_Init+0x13e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3304      	adds	r3, #4
			configregister =
 800144e:	617b      	str	r3, [r7, #20]
			registeroffset =
					(iocurrent < GPIO_PIN_8) ?
							(position << 2u) : ((position - 8u) << 2u);
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2bff      	cmp	r3, #255	; 0xff
 8001454:	d802      	bhi.n	800145c <HAL_GPIO_Init+0x14c>
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	e002      	b.n	8001462 <HAL_GPIO_Init+0x152>
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	3b08      	subs	r3, #8
 8001460:	009b      	lsls	r3, r3, #2
			registeroffset =
 8001462:	613b      	str	r3, [r7, #16]

			/* Apply the new configuration of the pin to the register */
			MODIFY_REG((*configregister),
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	210f      	movs	r1, #15
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	401a      	ands	r2, r3
 8001474:	6a39      	ldr	r1, [r7, #32]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	431a      	orrs	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	601a      	str	r2, [r3, #0]
					((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset),
					(config << registeroffset));

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8090 	beq.w	80015b0 <HAL_GPIO_Init+0x2a0>
				/* Enable AFIO Clock */
				__HAL_RCC_AFIO_CLK_ENABLE();
 8001490:	4b56      	ldr	r3, [pc, #344]	; (80015ec <HAL_GPIO_Init+0x2dc>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a55      	ldr	r2, [pc, #340]	; (80015ec <HAL_GPIO_Init+0x2dc>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b53      	ldr	r3, [pc, #332]	; (80015ec <HAL_GPIO_Init+0x2dc>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
				temp = AFIO->EXTICR[position >> 2u];
 80014a8:	4a51      	ldr	r2, [pc, #324]	; (80015f0 <HAL_GPIO_Init+0x2e0>)
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	3302      	adds	r3, #2
 80014b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b4:	60fb      	str	r3, [r7, #12]
				CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	220f      	movs	r2, #15
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4013      	ands	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]
				SET_BIT(temp,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a49      	ldr	r2, [pc, #292]	; (80015f4 <HAL_GPIO_Init+0x2e4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d00d      	beq.n	80014f0 <HAL_GPIO_Init+0x1e0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a48      	ldr	r2, [pc, #288]	; (80015f8 <HAL_GPIO_Init+0x2e8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d007      	beq.n	80014ec <HAL_GPIO_Init+0x1dc>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a47      	ldr	r2, [pc, #284]	; (80015fc <HAL_GPIO_Init+0x2ec>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d101      	bne.n	80014e8 <HAL_GPIO_Init+0x1d8>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e004      	b.n	80014f2 <HAL_GPIO_Init+0x1e2>
 80014e8:	2303      	movs	r3, #3
 80014ea:	e002      	b.n	80014f2 <HAL_GPIO_Init+0x1e2>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <HAL_GPIO_Init+0x1e2>
 80014f0:	2300      	movs	r3, #0
 80014f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f4:	f002 0203 	and.w	r2, r2, #3
 80014f8:	0092      	lsls	r2, r2, #2
 80014fa:	4093      	lsls	r3, r2
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
						(GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
				AFIO->EXTICR[position >> 2u] = temp;
 8001502:	493b      	ldr	r1, [pc, #236]	; (80015f0 <HAL_GPIO_Init+0x2e0>)
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3302      	adds	r3, #2
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Enable or disable the rising trigger */
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d006      	beq.n	800152a <HAL_GPIO_Init+0x21a>
					SET_BIT(EXTI->RTSR, iocurrent);
 800151c:	4b38      	ldr	r3, [pc, #224]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	4937      	ldr	r1, [pc, #220]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	608b      	str	r3, [r1, #8]
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x228>
				} else {
					CLEAR_BIT(EXTI->RTSR, iocurrent);
 800152a:	4b35      	ldr	r3, [pc, #212]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	43db      	mvns	r3, r3
 8001532:	4933      	ldr	r1, [pc, #204]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 8001534:	4013      	ands	r3, r2
 8001536:	608b      	str	r3, [r1, #8]
				}

				/* Enable or disable the falling trigger */
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d006      	beq.n	8001552 <HAL_GPIO_Init+0x242>
					SET_BIT(EXTI->FTSR, iocurrent);
 8001544:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	492d      	ldr	r1, [pc, #180]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	60cb      	str	r3, [r1, #12]
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x250>
				} else {
					CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	43db      	mvns	r3, r3
 800155a:	4929      	ldr	r1, [pc, #164]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 800155c:	4013      	ands	r3, r2
 800155e:	60cb      	str	r3, [r1, #12]
				}

				/* Configure the event mask */
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <HAL_GPIO_Init+0x26a>
					SET_BIT(EXTI->EMR, iocurrent);
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	4923      	ldr	r1, [pc, #140]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
 8001578:	e006      	b.n	8001588 <HAL_GPIO_Init+0x278>
				} else {
					CLEAR_BIT(EXTI->EMR, iocurrent);
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	43db      	mvns	r3, r3
 8001582:	491f      	ldr	r1, [pc, #124]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 8001584:	4013      	ands	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
				}

				/* Configure the interrupt mask */
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <HAL_GPIO_Init+0x292>
					SET_BIT(EXTI->IMR, iocurrent);
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4919      	ldr	r1, [pc, #100]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x2a0>
				} else {
					CLEAR_BIT(EXTI->IMR, iocurrent);
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	4915      	ldr	r1, [pc, #84]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	600b      	str	r3, [r1, #0]
				}
			}
		}

		position++;
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	3301      	adds	r3, #1
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f47f aeaf 	bne.w	8001324 <HAL_GPIO_Init+0x14>
	}
}
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
 80015ca:	372c      	adds	r7, #44	; 0x2c
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	10320000 	.word	0x10320000
 80015d8:	10310000 	.word	0x10310000
 80015dc:	10220000 	.word	0x10220000
 80015e0:	10210000 	.word	0x10210000
 80015e4:	10120000 	.word	0x10120000
 80015e8:	10110000 	.word	0x10110000
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010000 	.word	0x40010000
 80015f4:	40010800 	.word	0x40010800
 80015f8:	40010c00 	.word	0x40010c00
 80015fc:	40011000 	.word	0x40011000
 8001600:	40010400 	.word	0x40010400

08001604 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	611a      	str	r2, [r3, #16]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16u;
	}
}
 8001620:	e003      	b.n	800162a <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16u;
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	611a      	str	r2, [r3, #16]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <HAL_GPIO_TogglePin>:
 * @brief  Toggles the specified GPIO pin
 * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param  GPIO_Pin: Specifies the pins to be toggled.
 * @retval None
 */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	/* get current Output Data Register value */
	odr = GPIOx->ODR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60fb      	str	r3, [r7, #12]

	/* Set selected pins that were at low level, and reset ones that were high */
	GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	041a      	lsls	r2, r3, #16
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43d9      	mvns	r1, r3
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	400b      	ands	r3, r1
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	611a      	str	r2, [r3, #16]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
	...

08001668 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this macro. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e26c      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 8087 	beq.w	8001796 <HAL_RCC_OscConfig+0x12e>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

		/* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001688:	4b92      	ldr	r3, [pc, #584]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b04      	cmp	r3, #4
 8001692:	d00c      	beq.n	80016ae <HAL_RCC_OscConfig+0x46>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8001694:	4b8f      	ldr	r3, [pc, #572]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b08      	cmp	r3, #8
 800169e:	d112      	bne.n	80016c6 <HAL_RCC_OscConfig+0x5e>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE))) {
 80016a0:	4b8c      	ldr	r3, [pc, #560]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ac:	d10b      	bne.n	80016c6 <HAL_RCC_OscConfig+0x5e>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	4b89      	ldr	r3, [pc, #548]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d06c      	beq.n	8001794 <HAL_RCC_OscConfig+0x12c>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d168      	bne.n	8001794 <HAL_RCC_OscConfig+0x12c>
				return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e246      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x76>
 80016d0:	4b80      	ldr	r3, [pc, #512]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a7f      	ldr	r2, [pc, #508]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	e02e      	b.n	800173c <HAL_RCC_OscConfig+0xd4>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x98>
 80016e6:	4b7b      	ldr	r3, [pc, #492]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a7a      	ldr	r2, [pc, #488]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b78      	ldr	r3, [pc, #480]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a77      	ldr	r2, [pc, #476]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e01d      	b.n	800173c <HAL_RCC_OscConfig+0xd4>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0xbc>
 800170a:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a71      	ldr	r2, [pc, #452]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b6f      	ldr	r3, [pc, #444]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a6e      	ldr	r2, [pc, #440]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 800171c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0xd4>
 8001724:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a6a      	ldr	r2, [pc, #424]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 800172a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b68      	ldr	r3, [pc, #416]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a67      	ldr	r2, [pc, #412]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173a:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <HAL_RCC_OscConfig+0x104>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001744:	f7ff fccc 	bl	80010e0 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0xf6>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800174c:	f7ff fcc8 	bl	80010e0 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0xf6>
						return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e1fa      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800175e:	4b5d      	ldr	r3, [pc, #372]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0xe4>
 800176a:	e014      	b.n	8001796 <HAL_RCC_OscConfig+0x12e>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800176c:	f7ff fcb8 	bl	80010e0 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x11e>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8001774:	f7ff fcb4 	bl	80010e0 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x11e>
						return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e1e6      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8001786:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x10c>
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x12e>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001794:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d063      	beq.n	800186a <HAL_RCC_OscConfig+0x202>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017a2:	4b4c      	ldr	r3, [pc, #304]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00b      	beq.n	80017c6 <HAL_RCC_OscConfig+0x15e>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80017ae:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d11c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x18c>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& (__HAL_RCC_GET_PLL_OSCSOURCE()
 80017ba:	4b46      	ldr	r3, [pc, #280]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d116      	bne.n	80017f4 <HAL_RCC_OscConfig+0x18c>
								== RCC_PLLSOURCE_HSI_DIV2))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	4b43      	ldr	r3, [pc, #268]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <HAL_RCC_OscConfig+0x176>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0x176>
				return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e1ba      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80017de:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4939      	ldr	r1, [pc, #228]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	e03a      	b.n	800186a <HAL_RCC_OscConfig+0x202>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF) {
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_OscConfig+0x1d6>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 80017fc:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <HAL_RCC_OscConfig+0x270>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001802:	f7ff fc6d 	bl	80010e0 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x1b4>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800180a:	f7ff fc69 	bl	80010e0 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x1b4>
						return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e19b      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800181c:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x1a2>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8001828:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4927      	ldr	r1, [pc, #156]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]
 800183c:	e015      	b.n	800186a <HAL_RCC_OscConfig+0x202>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <HAL_RCC_OscConfig+0x270>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001844:	f7ff fc4c 	bl	80010e0 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x1f6>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800184c:	f7ff fc48 	bl	80010e0 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x1f6>
						return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e17a      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x1e4>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d03a      	beq.n	80018ec <HAL_RCC_OscConfig+0x284>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF) {
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d019      	beq.n	80018b2 <HAL_RCC_OscConfig+0x24a>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_RCC_OscConfig+0x274>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8001884:	f7ff fc2c 	bl	80010e0 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x236>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800188c:	f7ff fc28 	bl	80010e0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x236>
					return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e15a      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x224>
				}
			}
			/*  To have a fully stabilized clock in the specified range, a software delay of 1ms
			 should be added.*/
			RCC_Delay(1);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f000 fa9a 	bl	8001de4 <RCC_Delay>
 80018b0:	e01c      	b.n	80018ec <HAL_RCC_OscConfig+0x284>
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_RCC_OscConfig+0x274>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80018b8:	f7ff fc12 	bl	80010e0 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is disabled */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80018be:	e00f      	b.n	80018e0 <HAL_RCC_OscConfig+0x278>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80018c0:	f7ff fc0e 	bl	80010e0 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d908      	bls.n	80018e0 <HAL_RCC_OscConfig+0x278>
					return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e140      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	42420000 	.word	0x42420000
 80018dc:	42420480 	.word	0x42420480
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80018e0:	4b9e      	ldr	r3, [pc, #632]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1e9      	bne.n	80018c0 <HAL_RCC_OscConfig+0x258>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80a6 	beq.w	8001a46 <HAL_RCC_OscConfig+0x3de>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80018fe:	4b97      	ldr	r3, [pc, #604]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10d      	bne.n	8001926 <HAL_RCC_OscConfig+0x2be>
			__HAL_RCC_PWR_CLK_ENABLE();
 800190a:	4b94      	ldr	r3, [pc, #592]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	4a93      	ldr	r2, [pc, #588]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	61d3      	str	r3, [r2, #28]
 8001916:	4b91      	ldr	r3, [pc, #580]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8001922:	2301      	movs	r3, #1
 8001924:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8001926:	4b8e      	ldr	r3, [pc, #568]	; (8001b60 <HAL_RCC_OscConfig+0x4f8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d118      	bne.n	8001964 <HAL_RCC_OscConfig+0x2fc>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8001932:	4b8b      	ldr	r3, [pc, #556]	; (8001b60 <HAL_RCC_OscConfig+0x4f8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a8a      	ldr	r2, [pc, #552]	; (8001b60 <HAL_RCC_OscConfig+0x4f8>)
 8001938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193c:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 800193e:	f7ff fbcf 	bl	80010e0 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x2f0>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8001946:	f7ff fbcb 	bl	80010e0 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b64      	cmp	r3, #100	; 0x64
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x2f0>
					return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e0fd      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8001958:	4b81      	ldr	r3, [pc, #516]	; (8001b60 <HAL_RCC_OscConfig+0x4f8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x2de>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x312>
 800196c:	4b7b      	ldr	r3, [pc, #492]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4a7a      	ldr	r2, [pc, #488]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6213      	str	r3, [r2, #32]
 8001978:	e02d      	b.n	80019d6 <HAL_RCC_OscConfig+0x36e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x334>
 8001982:	4b76      	ldr	r3, [pc, #472]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a75      	ldr	r2, [pc, #468]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6213      	str	r3, [r2, #32]
 800198e:	4b73      	ldr	r3, [pc, #460]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a72      	ldr	r2, [pc, #456]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001994:	f023 0304 	bic.w	r3, r3, #4
 8001998:	6213      	str	r3, [r2, #32]
 800199a:	e01c      	b.n	80019d6 <HAL_RCC_OscConfig+0x36e>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d10c      	bne.n	80019be <HAL_RCC_OscConfig+0x356>
 80019a4:	4b6d      	ldr	r3, [pc, #436]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a6c      	ldr	r2, [pc, #432]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6213      	str	r3, [r2, #32]
 80019b0:	4b6a      	ldr	r3, [pc, #424]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4a69      	ldr	r2, [pc, #420]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6213      	str	r3, [r2, #32]
 80019bc:	e00b      	b.n	80019d6 <HAL_RCC_OscConfig+0x36e>
 80019be:	4b67      	ldr	r3, [pc, #412]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4a66      	ldr	r2, [pc, #408]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	6213      	str	r3, [r2, #32]
 80019ca:	4b64      	ldr	r3, [pc, #400]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a63      	ldr	r2, [pc, #396]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	f023 0304 	bic.w	r3, r3, #4
 80019d4:	6213      	str	r3, [r2, #32]
		/* Check the LSE State */
		if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF) {
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d015      	beq.n	8001a0a <HAL_RCC_OscConfig+0x3a2>
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80019de:	f7ff fb7f 	bl	80010e0 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80019e4:	e00a      	b.n	80019fc <HAL_RCC_OscConfig+0x394>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80019e6:	f7ff fb7b 	bl	80010e0 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x394>
					return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e0ab      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80019fc:	4b57      	ldr	r3, [pc, #348]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0ee      	beq.n	80019e6 <HAL_RCC_OscConfig+0x37e>
 8001a08:	e014      	b.n	8001a34 <HAL_RCC_OscConfig+0x3cc>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8001a0a:	f7ff fb69 	bl	80010e0 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is disabled */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x3c0>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001a12:	f7ff fb65 	bl	80010e0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x3c0>
					return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e095      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8001a28:	4b4c      	ldr	r3, [pc, #304]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1ee      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3aa>
				}
			}
		}

		/* Require to disable power clock if necessary */
		if (pwrclkchanged == SET) {
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d105      	bne.n	8001a46 <HAL_RCC_OscConfig+0x3de>
			__HAL_RCC_PWR_CLK_DISABLE();
 8001a3a:	4b48      	ldr	r3, [pc, #288]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4a47      	ldr	r2, [pc, #284]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 8081 	beq.w	8001b52 <HAL_RCC_OscConfig+0x4ea>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8001a50:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 030c 	and.w	r3, r3, #12
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d061      	beq.n	8001b20 <HAL_RCC_OscConfig+0x4b8>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d146      	bne.n	8001af2 <HAL_RCC_OscConfig+0x48a>
				assert_param(
						IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
				assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8001a64:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_RCC_OscConfig+0x4fc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001a6a:	f7ff fb39 	bl	80010e0 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x41c>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001a72:	f7ff fb35 	bl	80010e0 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x41c>
						return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e067      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f0      	bne.n	8001a72 <HAL_RCC_OscConfig+0x40a>
					}
				}

				/* Configure the HSE prediv factor --------------------------------*/
				/* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
				if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a98:	d108      	bne.n	8001aac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

					/* Set PREDIV1 Value */
					__HAL_RCC_HSE_PREDIV_CONFIG(
 8001a9a:	4b30      	ldr	r3, [pc, #192]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	492d      	ldr	r1, [pc, #180]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
							RCC_OscInitStruct->HSEPredivValue);
				}

				/* Configure the main PLL clock source and multiplication factors. */
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a19      	ldr	r1, [r3, #32]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	430b      	orrs	r3, r1
 8001abe:	4927      	ldr	r1, [pc, #156]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
						RCC_OscInitStruct->PLL.PLLMUL);
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <HAL_RCC_OscConfig+0x4fc>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001aca:	f7ff fb09 	bl	80010e0 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x47c>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001ad2:	f7ff fb05 	bl	80010e0 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x47c>
						return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e037      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x46a>
 8001af0:	e02f      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ea>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <HAL_RCC_OscConfig+0x4fc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001af8:	f7ff faf2 	bl	80010e0 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x4aa>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001b00:	f7ff faee 	bl	80010e0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x4aa>
						return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e020      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x498>
 8001b1e:	e018      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ea>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4c4>
				return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e013      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->CFGR;
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	60fb      	str	r3, [r7, #12]
				if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
						!= RCC_OscInitStruct->PLL.PLLSource)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
				if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC)
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x4e6>
						|| (READ_BIT(pll_config, RCC_CFGR_PLLMULL)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
								!= RCC_OscInitStruct->PLL.PLLMUL)) {
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
						|| (READ_BIT(pll_config, RCC_CFGR_PLLMULL)
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x4ea>
					return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x4ec>
				}
			}
		}
	}

	return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40007000 	.word	0x40007000
 8001b64:	42420060 	.word	0x42420060

08001b68 <HAL_RCC_ClockConfig>:
 *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 *         currently used as system clock source.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0d0      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1b6>
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8001b7c:	4b6a      	ldr	r3, [pc, #424]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d910      	bls.n	8001bac <HAL_RCC_ClockConfig+0x44>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b67      	ldr	r3, [pc, #412]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 0207 	bic.w	r2, r3, #7
 8001b92:	4965      	ldr	r1, [pc, #404]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8001b9a:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x44>
			return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0b8      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1b6>
		}
	}

#endif /* FLASH_ACR_LATENCY */
	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d020      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x92>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x68>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc4:	4b59      	ldr	r3, [pc, #356]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4a58      	ldr	r2, [pc, #352]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bce:	6053      	str	r3, [r2, #4]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x80>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4a52      	ldr	r2, [pc, #328]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001be6:	6053      	str	r3, [r2, #4]
		}

		/* Set the new HCLK clock divider */
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be8:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	494d      	ldr	r1, [pc, #308]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	604b      	str	r3, [r1, #4]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d040      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xb6>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d115      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e07f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1b6>
			}
		}
		/* PLL is selected as System Clock Source */
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8001c26:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e073      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1b6>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8001c36:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e06b      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1b6>
			}
		}
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c46:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f023 0203 	bic.w	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4936      	ldr	r1, [pc, #216]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 8001c58:	f7ff fa42 	bl	80010e0 <HAL_GetTick>
 8001c5c:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8001c60:	f7ff fa3e 	bl	80010e0 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e053      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1b6>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001c76:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	009b      	lsls	r3, r3, #2
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d1eb      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xf8>
		}
	}

#if defined(FLASH_ACR_LATENCY)
	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d210      	bcs.n	8001cb8 <HAL_RCC_ClockConfig+0x150>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 0207 	bic.w	r2, r3, #7
 8001c9e:	4922      	ldr	r1, [pc, #136]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x150>
			return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e032      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1b6>
		}
	}
#endif /* FLASH_ACR_LATENCY */

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x16e>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4916      	ldr	r1, [pc, #88]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	604b      	str	r3, [r1, #4]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x18e>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	490e      	ldr	r1, [pc, #56]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001cf6:	f000 f821 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cfa:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	490a      	ldr	r1, [pc, #40]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001d08:	5ccb      	ldrb	r3, [r1, r3]
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001d0e:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <HAL_RCC_ClockConfig+0x1cc>)
 8001d10:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings*/
	HAL_InitTick(uwTickPrio);
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_ClockConfig+0x1d0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f9a0 	bl	800105c <HAL_InitTick>

	return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40022000 	.word	0x40022000
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	08002660 	.word	0x08002660
 8001d34:	20000078 	.word	0x20000078
 8001d38:	2000007c 	.word	0x2000007c

08001d3c <HAL_RCC_GetSysClockFreq>:
 * @note   Each time SYSCLK changes, this function must be called to update the
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
#else
	static const uint8_t aPredivFactorTable[2U] = { 1, 2 };
#endif /*RCC_CFGR2_PREDIV1*/

#endif
	uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
	uint32_t sysclockfreq = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

	tmpreg = RCC->CFGR;
 8001d56:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	60fb      	str	r3, [r7, #12]

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (tmpreg & RCC_CFGR_SWS) {
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d002      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x30>
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d003      	beq.n	8001d72 <HAL_RCC_GetSysClockFreq+0x36>
 8001d6a:	e027      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x80>
	case RCC_SYSCLKSOURCE_STATUS_HSE: /* HSE used as system clock */
	{
		sysclockfreq = HSE_VALUE;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d6e:	613b      	str	r3, [r7, #16]
		break;
 8001d70:	e027      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x86>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock */
	{
		pllmul = aPLLMULFactorTable[(uint32_t) (tmpreg & RCC_CFGR_PLLMULL)
				>> RCC_CFGR_PLLMULL_Pos];
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	0c9b      	lsrs	r3, r3, #18
 8001d76:	f003 030f 	and.w	r3, r3, #15
		pllmul = aPLLMULFactorTable[(uint32_t) (tmpreg & RCC_CFGR_PLLMULL)
 8001d7a:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	607b      	str	r3, [r7, #4]
		if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2) {
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d010      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x70>
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
			prediv = aPredivFactorTable[(uint32_t) (RCC->CFGR
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
					& RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d8e:	0c5b      	lsrs	r3, r3, #17
 8001d90:	f003 0301 	and.w	r3, r3, #1
			prediv = aPredivFactorTable[(uint32_t) (RCC->CFGR
 8001d94:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
 8001d98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
			/* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
			pllclk = (uint32_t) ((HSE_VALUE * pllmul) / prediv);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d9e:	fb02 f203 	mul.w	r2, r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e004      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
		} else {
			/* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
			pllclk = (uint32_t) ((HSI_VALUE >> 1) * pllmul);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001db0:	fb02 f303 	mul.w	r3, r2, r3
 8001db4:	617b      	str	r3, [r7, #20]
		}
		sysclockfreq = pllclk;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	613b      	str	r3, [r7, #16]
		break;
 8001dba:	e002      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x86>
	}
	case RCC_SYSCLKSOURCE_STATUS_HSI: /* HSI used as system clock source */
	default: /* HSI used as system clock */
	{
		sysclockfreq = HSI_VALUE;
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dbe:	613b      	str	r3, [r7, #16]
		break;
 8001dc0:	bf00      	nop
	}
	}
	return sysclockfreq;
 8001dc2:	693b      	ldr	r3, [r7, #16]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	007a1200 	.word	0x007a1200
 8001dd8:	08002670 	.word	0x08002670
 8001ddc:	08002680 	.word	0x08002680
 8001de0:	003d0900 	.word	0x003d0900

08001de4 <RCC_Delay>:
/**
 * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
 * @param  mdelay: specifies the delay time length, in milliseconds.
 * @retval None
 */
static void RCC_Delay(uint32_t mdelay) {
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	__IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <RCC_Delay+0x34>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <RCC_Delay+0x38>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0a5b      	lsrs	r3, r3, #9
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	60fb      	str	r3, [r7, #12]
	do {
		__NOP();
 8001e00:	bf00      	nop
	} while (Delay--);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1e5a      	subs	r2, r3, #1
 8001e06:	60fa      	str	r2, [r7, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f9      	bne.n	8001e00 <RCC_Delay+0x1c>
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	20000078 	.word	0x20000078
 8001e1c:	10624dd3 	.word	0x10624dd3

08001e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e041      	b.n	8001eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff f870 	bl	8000f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	f000 fa6e 	bl	8002340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d001      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e035      	b.n	8001f44 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <HAL_TIM_Base_Start_IT+0x90>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d009      	beq.n	8001f0e <HAL_TIM_Base_Start_IT+0x4e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f02:	d004      	beq.n	8001f0e <HAL_TIM_Base_Start_IT+0x4e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <HAL_TIM_Base_Start_IT+0x94>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d111      	bne.n	8001f32 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2b06      	cmp	r3, #6
 8001f1e:	d010      	beq.n	8001f42 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f30:	e007      	b.n	8001f42 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0201 	orr.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40012c00 	.word	0x40012c00
 8001f54:	40000400 	.word	0x40000400

08001f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d122      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0202 	mvn.w	r2, #2
 8001f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f9b4 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f9a7 	bl	80022f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f9b6 	bl	800231a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d122      	bne.n	8002008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d11b      	bne.n	8002008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0204 	mvn.w	r2, #4
 8001fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f98a 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f97d 	bl	80022f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f98c 	bl	800231a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b08      	cmp	r3, #8
 8002014:	d122      	bne.n	800205c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b08      	cmp	r3, #8
 8002022:	d11b      	bne.n	800205c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0208 	mvn.w	r2, #8
 800202c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2204      	movs	r2, #4
 8002032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f960 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
 8002048:	e005      	b.n	8002056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f953 	bl	80022f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f962 	bl	800231a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b10      	cmp	r3, #16
 8002068:	d122      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b10      	cmp	r3, #16
 8002076:	d11b      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0210 	mvn.w	r2, #16
 8002080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2208      	movs	r2, #8
 8002086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f936 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
 800209c:	e005      	b.n	80020aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f929 	bl	80022f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f938 	bl	800231a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0201 	mvn.w	r2, #1
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fe28 	bl	8000d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e6:	2b80      	cmp	r3, #128	; 0x80
 80020e8:	d10e      	bne.n	8002108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d107      	bne.n	8002108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fa6b 	bl	80025de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b40      	cmp	r3, #64	; 0x40
 8002122:	d107      	bne.n	8002134 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f8fc 	bl	800232c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	2b20      	cmp	r3, #32
 8002140:	d10e      	bne.n	8002160 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b20      	cmp	r3, #32
 800214e:	d107      	bne.n	8002160 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0220 	mvn.w	r2, #32
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fa36 	bl	80025cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_TIM_ConfigClockSource+0x1c>
 8002180:	2302      	movs	r3, #2
 8002182:	e0b4      	b.n	80022ee <HAL_TIM_ConfigClockSource+0x186>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021bc:	d03e      	beq.n	800223c <HAL_TIM_ConfigClockSource+0xd4>
 80021be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c2:	f200 8087 	bhi.w	80022d4 <HAL_TIM_ConfigClockSource+0x16c>
 80021c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ca:	f000 8086 	beq.w	80022da <HAL_TIM_ConfigClockSource+0x172>
 80021ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d2:	d87f      	bhi.n	80022d4 <HAL_TIM_ConfigClockSource+0x16c>
 80021d4:	2b70      	cmp	r3, #112	; 0x70
 80021d6:	d01a      	beq.n	800220e <HAL_TIM_ConfigClockSource+0xa6>
 80021d8:	2b70      	cmp	r3, #112	; 0x70
 80021da:	d87b      	bhi.n	80022d4 <HAL_TIM_ConfigClockSource+0x16c>
 80021dc:	2b60      	cmp	r3, #96	; 0x60
 80021de:	d050      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0x11a>
 80021e0:	2b60      	cmp	r3, #96	; 0x60
 80021e2:	d877      	bhi.n	80022d4 <HAL_TIM_ConfigClockSource+0x16c>
 80021e4:	2b50      	cmp	r3, #80	; 0x50
 80021e6:	d03c      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0xfa>
 80021e8:	2b50      	cmp	r3, #80	; 0x50
 80021ea:	d873      	bhi.n	80022d4 <HAL_TIM_ConfigClockSource+0x16c>
 80021ec:	2b40      	cmp	r3, #64	; 0x40
 80021ee:	d058      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x13a>
 80021f0:	2b40      	cmp	r3, #64	; 0x40
 80021f2:	d86f      	bhi.n	80022d4 <HAL_TIM_ConfigClockSource+0x16c>
 80021f4:	2b30      	cmp	r3, #48	; 0x30
 80021f6:	d064      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x15a>
 80021f8:	2b30      	cmp	r3, #48	; 0x30
 80021fa:	d86b      	bhi.n	80022d4 <HAL_TIM_ConfigClockSource+0x16c>
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d060      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002200:	2b20      	cmp	r3, #32
 8002202:	d867      	bhi.n	80022d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002204:	2b00      	cmp	r3, #0
 8002206:	d05c      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002208:	2b10      	cmp	r3, #16
 800220a:	d05a      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x15a>
 800220c:	e062      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6899      	ldr	r1, [r3, #8]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f000 f95e 	bl	80024de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002230:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	609a      	str	r2, [r3, #8]
      break;
 800223a:	e04f      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f000 f947 	bl	80024de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800225e:	609a      	str	r2, [r3, #8]
      break;
 8002260:	e03c      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6859      	ldr	r1, [r3, #4]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	461a      	mov	r2, r3
 8002270:	f000 f8be 	bl	80023f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2150      	movs	r1, #80	; 0x50
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f915 	bl	80024aa <TIM_ITRx_SetConfig>
      break;
 8002280:	e02c      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	461a      	mov	r2, r3
 8002290:	f000 f8dc 	bl	800244c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2160      	movs	r1, #96	; 0x60
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f905 	bl	80024aa <TIM_ITRx_SetConfig>
      break;
 80022a0:	e01c      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	461a      	mov	r2, r3
 80022b0:	f000 f89e 	bl	80023f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2140      	movs	r1, #64	; 0x40
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f8f5 	bl	80024aa <TIM_ITRx_SetConfig>
      break;
 80022c0:	e00c      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4619      	mov	r1, r3
 80022cc:	4610      	mov	r0, r2
 80022ce:	f000 f8ec 	bl	80024aa <TIM_ITRx_SetConfig>
      break;
 80022d2:	e003      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
      break;
 80022d8:	e000      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
	...

08002340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a25      	ldr	r2, [pc, #148]	; (80023e8 <TIM_Base_SetConfig+0xa8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d007      	beq.n	8002368 <TIM_Base_SetConfig+0x28>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235e:	d003      	beq.n	8002368 <TIM_Base_SetConfig+0x28>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a22      	ldr	r2, [pc, #136]	; (80023ec <TIM_Base_SetConfig+0xac>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d108      	bne.n	800237a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a1a      	ldr	r2, [pc, #104]	; (80023e8 <TIM_Base_SetConfig+0xa8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <TIM_Base_SetConfig+0x52>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002388:	d003      	beq.n	8002392 <TIM_Base_SetConfig+0x52>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a17      	ldr	r2, [pc, #92]	; (80023ec <TIM_Base_SetConfig+0xac>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d108      	bne.n	80023a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <TIM_Base_SetConfig+0xa8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d103      	bne.n	80023d8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	615a      	str	r2, [r3, #20]
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	40012c00 	.word	0x40012c00
 80023ec:	40000400 	.word	0x40000400

080023f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	f023 0201 	bic.w	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800241a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f023 030a 	bic.w	r3, r3, #10
 800242c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4313      	orrs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	621a      	str	r2, [r3, #32]
}
 8002442:	bf00      	nop
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	f023 0210 	bic.w	r2, r3, #16
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	031b      	lsls	r3, r3, #12
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002488:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	621a      	str	r2, [r3, #32]
}
 80024a0:	bf00      	nop
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f043 0307 	orr.w	r3, r3, #7
 80024cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	609a      	str	r2, [r3, #8]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024de:	b480      	push	{r7}
 80024e0:	b087      	sub	sp, #28
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	021a      	lsls	r2, r3, #8
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	431a      	orrs	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4313      	orrs	r3, r2
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	609a      	str	r2, [r3, #8]
}
 8002512:	bf00      	nop
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002530:	2302      	movs	r3, #2
 8002532:	e041      	b.n	80025b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d009      	beq.n	800258c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002580:	d004      	beq.n	800258c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d10c      	bne.n	80025a6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002592:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	4313      	orrs	r3, r2
 800259c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40012c00 	.word	0x40012c00
 80025c8:	40000400 	.word	0x40000400

080025cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr

080025de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <__libc_init_array>:
 80025f0:	b570      	push	{r4, r5, r6, lr}
 80025f2:	2600      	movs	r6, #0
 80025f4:	4d0c      	ldr	r5, [pc, #48]	; (8002628 <__libc_init_array+0x38>)
 80025f6:	4c0d      	ldr	r4, [pc, #52]	; (800262c <__libc_init_array+0x3c>)
 80025f8:	1b64      	subs	r4, r4, r5
 80025fa:	10a4      	asrs	r4, r4, #2
 80025fc:	42a6      	cmp	r6, r4
 80025fe:	d109      	bne.n	8002614 <__libc_init_array+0x24>
 8002600:	f000 f822 	bl	8002648 <_init>
 8002604:	2600      	movs	r6, #0
 8002606:	4d0a      	ldr	r5, [pc, #40]	; (8002630 <__libc_init_array+0x40>)
 8002608:	4c0a      	ldr	r4, [pc, #40]	; (8002634 <__libc_init_array+0x44>)
 800260a:	1b64      	subs	r4, r4, r5
 800260c:	10a4      	asrs	r4, r4, #2
 800260e:	42a6      	cmp	r6, r4
 8002610:	d105      	bne.n	800261e <__libc_init_array+0x2e>
 8002612:	bd70      	pop	{r4, r5, r6, pc}
 8002614:	f855 3b04 	ldr.w	r3, [r5], #4
 8002618:	4798      	blx	r3
 800261a:	3601      	adds	r6, #1
 800261c:	e7ee      	b.n	80025fc <__libc_init_array+0xc>
 800261e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002622:	4798      	blx	r3
 8002624:	3601      	adds	r6, #1
 8002626:	e7f2      	b.n	800260e <__libc_init_array+0x1e>
 8002628:	08002684 	.word	0x08002684
 800262c:	08002684 	.word	0x08002684
 8002630:	08002684 	.word	0x08002684
 8002634:	08002688 	.word	0x08002688

08002638 <memset>:
 8002638:	4603      	mov	r3, r0
 800263a:	4402      	add	r2, r0
 800263c:	4293      	cmp	r3, r2
 800263e:	d100      	bne.n	8002642 <memset+0xa>
 8002640:	4770      	bx	lr
 8002642:	f803 1b01 	strb.w	r1, [r3], #1
 8002646:	e7f9      	b.n	800263c <memset+0x4>

08002648 <_init>:
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264a:	bf00      	nop
 800264c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264e:	bc08      	pop	{r3}
 8002650:	469e      	mov	lr, r3
 8002652:	4770      	bx	lr

08002654 <_fini>:
 8002654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002656:	bf00      	nop
 8002658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265a:	bc08      	pop	{r3}
 800265c:	469e      	mov	lr, r3
 800265e:	4770      	bx	lr
